/* Generated By:JavaCC: Do not edit this line. JSONParserTokenManager.java */
package tech.glacial.json.parser;

/**
 * Token Manager.
 */
public final class JSONParserTokenManager implements JSONParserConstants {

    /**
     * Debug output.
     */
    public java.io.PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            default:
                return -1;
        }
    }

    private int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 34:
                return jjStopAtPos(0, 6);
            case 44:
                return jjStopAtPos(0, 12);
            case 58:
                return jjStopAtPos(0, 15);
            case 91:
                return jjStopAtPos(0, 11);
            case 93:
                return jjStopAtPos(0, 13);
            case 102:
                return jjMoveStringLiteralDfa1_0(0x8L);
            case 110:
                return jjMoveStringLiteralDfa1_0(0x2L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x4L);
            case 123:
                return jjStopAtPos(0, 14);
            case 125:
                return jjStopAtPos(0, 16);
            default:
                return jjMoveNfa_0(1, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x8L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0x4L);
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0x2L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(0, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0xaL);
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0x4L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(1, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
            case 101:
                if ((active0 & 0x4L) != 0L)
                    return jjStopAtPos(3, 2);
                break;
            case 108:
                if ((active0 & 0x2L) != 0L)
                    return jjStopAtPos(3, 1);
                break;
            case 115:
                return jjMoveStringLiteralDfa4_0(active0, 0x8L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(2, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar) {
            case 101:
                if ((active0 & 0x8L) != 0L)
                    return jjStopAtPos(4, 3);
                break;
            default:
                break;
        }
        return jjStartNfa_0(3, active0);
    }

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 10;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            if ((0x3fe000000000000L & l) != 0L) {
                                if (kind > 5)
                                    kind = 5;
                                jjCheckNAddStates(0, 2);
                            } else if ((0x100003600L & l) != 0L) {
                                if (kind > 4)
                                    kind = 4;
                                jjCheckNAdd(0);
                            } else if (curChar == 48) {
                                if (kind > 5)
                                    kind = 5;
                                jjCheckNAddTwoStates(3, 5);
                            } else if (curChar == 45)
                                jjAddStates(3, 4);
                            break;
                        case 0:
                            if ((0x100003600L & l) == 0L)
                                break;
                            kind = 4;
                            jjCheckNAdd(0);
                            break;
                        case 2:
                            if (curChar != 48)
                                break;
                            if (kind > 5)
                                kind = 5;
                            jjCheckNAddTwoStates(3, 5);
                            break;
                        case 3:
                            if (curChar == 46)
                                jjCheckNAdd(4);
                            break;
                        case 4:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 5)
                                kind = 5;
                            jjCheckNAddTwoStates(4, 5);
                            break;
                        case 6:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(7);
                            break;
                        case 7:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 5)
                                kind = 5;
                            jjCheckNAdd(7);
                            break;
                        case 8:
                            if ((0x3fe000000000000L & l) == 0L)
                                break;
                            if (kind > 5)
                                kind = 5;
                            jjCheckNAddStates(0, 2);
                            break;
                        case 9:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 5)
                                kind = 5;
                            jjCheckNAddStates(0, 2);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 5:
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(5, 6);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 10 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private int jjStopStringLiteralDfa_1(int pos, long active0) {
        return -1;
    }

    private int jjStartNfa_1(int pos, long active0) {
        return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
    }

    private int jjMoveStringLiteralDfa0_1() {
        switch (curChar) {
            case 34:
                return jjStopAtPos(0, 10);
            default:
                return jjMoveNfa_1(1, 0);
        }
    }

    private static final long[] jjbitVec0 = {
        0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    private static final long[] jjbitVec2 = {
        0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };

    private int jjMoveNfa_1(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 16;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            if ((0xfffffffbffffffffL & l) != 0L) {
                                if (kind > 7)
                                    kind = 7;
                                jjCheckNAdd(0);
                            }
                            if (curChar == 48)
                                jjAddStates(7, 8);
                            break;
                        case 0:
                            if ((0xfffffffbffffffffL & l) == 0L)
                                break;
                            if (kind > 7)
                                kind = 7;
                            jjCheckNAdd(0);
                            break;
                        case 3:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 4;
                            break;
                        case 4:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 5;
                            break;
                        case 5:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 6;
                            break;
                        case 6:
                            if ((0x3ff000000000000L & l) != 0L && kind > 9)
                                kind = 9;
                            break;
                        case 14:
                            if (curChar == 47 && kind > 8)
                                kind = 8;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            if ((0xffffffffefffffffL & l) != 0L) {
                                if (kind > 7)
                                    kind = 7;
                                jjCheckNAdd(0);
                            } else if (curChar == 92)
                                jjAddStates(9, 15);
                            break;
                        case 0:
                            if ((0xffffffffefffffffL & l) == 0L)
                                break;
                            if (kind > 7)
                                kind = 7;
                            jjCheckNAdd(0);
                            break;
                        case 2:
                            if (curChar == 120)
                                jjCheckNAdd(3);
                            break;
                        case 7:
                            if (curChar == 88)
                                jjCheckNAdd(3);
                            break;
                        case 8:
                            if (curChar == 92)
                                jjAddStates(9, 15);
                            break;
                        case 9:
                            if (curChar == 98 && kind > 8)
                                kind = 8;
                            break;
                        case 10:
                            if (curChar == 102 && kind > 8)
                                kind = 8;
                            break;
                        case 11:
                            if (curChar == 110 && kind > 8)
                                kind = 8;
                            break;
                        case 12:
                            if (curChar == 114 && kind > 8)
                                kind = 8;
                            break;
                        case 13:
                            if (curChar == 116 && kind > 8)
                                kind = 8;
                            break;
                        case 15:
                            if (curChar == 92 && kind > 8)
                                kind = 8;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                        case 0:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 7)
                                kind = 7;
                            jjCheckNAdd(0);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private static final int[] jjnextStates = {
        9, 3, 5, 2, 8, 6, 7, 2, 7, 9, 10, 11, 12, 13, 14, 15,
    };

    private static boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            default:
                return (jjbitVec0[i1] & l1) != 0L;
        }
    }

    /**
     * Token literal values.
     */
    private static final String[] jjstrLiteralImages = {
        "", "\156\165\154\154", "\164\162\165\145", "\146\141\154\163\145", null, null,
        null, null, null, null, null, "\133", "\54", "\135", "\173", "\72", "\175",};

    /**
     * Lex State array.
     */
    public static final int[] jjnewLexState = {
        -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1,
    };
    private static final long[] jjtoToken = {
        0x1fc2fL,
    };
    private static final long[] jjtoSkip = {
        0x10L,
    };
    private SimpleCharStream input_stream;
    private final int[] jjrounds = new int[16];
    private final int[] jjstateSet = new int[32];
    private char curChar;

    /**
     * Constructor.
     */
    public JSONParserTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public JSONParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = 0;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 16; i-- > 0; )
            jjrounds[i] = 0x80000000;
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    private void SwitchTo(int lexState) {
        if (lexState >= 2 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    private Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    private int curLexState = 0;
    private int jjnewStateCnt;
    private int jjround;
    private int jjmatchedPos;
    private int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ; ) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            for (; ; ) {
                switch (curLexState) {
                    case 0:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_0();
                        break;
                    case 1:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_1();
                        break;
                }
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos)
                        input_stream.backup(curPos - jjmatchedPos - 1);
                    if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        return matchedToken;
                    } else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        continue EOFLoop;
                    }
                    if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = input_stream.readChar();
                        continue;
                    } catch (java.io.IOException ignored) {
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (java.io.IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else
                        error_column++;
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
            }
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

}
