/* Generated By:JavaCC: Do not edit this line. JSONParser.java */
package tech.glacial.json;

import tech.glacial.json.parser.JSONParserTokenManager;
import tech.glacial.json.parser.SimpleCharStream;
import tech.glacial.json.parser.JSONParserConstants;
import tech.glacial.json.parser.Token;

import java.io.IOException;
import java.io.StringReader;

/**
 * Created by glavo on 17-3-15.
 *
 * @author Glavo
 * @version 1.0.0
 */
public final class JSONParser implements JSONParserConstants {

    /**
     * Generated Token Manager.
     */
    private JSONParserTokenManager token_source;
    private SimpleCharStream jj_input_stream;
    /**
     * Current token.
     */
    private Token token;
    private int jj_ntk;
    private int jj_gen;
    final private int[] jj_la1 = new int[6];
    static private int[] jj_la1_0;

    static {
        jj_la1_0 = new int[]{0x4c2e, 0xc, 0x1000, 0x4c2e, 0x1000, 0x400};
    }

    /**
     * Constructor with InputStream.
     */
    public JSONParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public JSONParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new JSONParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    }

    public JSONParser(String s) {
        this(new StringReader(s));
    }

    public JSON json() throws ParseException, IOException, StringParseException {
        JSON j;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case True:
            case False:
                j = jboolean();
                break;
            case JNumber:
                j = jnumber();
                break;
            case JString:
                j = jstring();
                break;
            case 11:
                j = jarray();
                break;
            case 14:
                j = jobject();
                break;
            case JNull:
                j = jnull();
                break;
            default:
                jj_la1[0] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }

        return j;

    }

    public JSONBoolean jboolean() throws ParseException {
        Token tok;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case True:
                tok = jj_consume_token(True);
                return JSONBoolean.True;

            case False:
                tok = jj_consume_token(False);
                return JSONBoolean.False;

            default:
                jj_la1[1] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public JSONNumber jnumber() throws ParseException {
        Token tok;
        tok = jj_consume_token(JNumber);
        return JSONNumber.valueOf(tok.image);
    }

    public JSONString jstring() throws ParseException, IOException, StringParseException {
        Token tok;
        tok = jj_consume_token(JString);
        return JSONString.parseString(tok.image);
    }

    public JSONArray jarray() throws ParseException, IOException, StringParseException {
        JSONArray.JSONArrayBuffer jab = new JSONArray.JSONArrayBuffer();
        JSON j;
        jj_consume_token(11);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case JNull:
            case True:
            case False:
            case JNumber:
            case JString:
            case 11:
            case 14:
                j = json();
                jab.append(j);
                label_1:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case 12:
                            break;
                        default:
                            jj_la1[2] = jj_gen;
                            break label_1;
                    }
                    jj_consume_token(12);
                    j = json();
                    jab.append(j);
                }
                break;
            default:
                jj_la1[3] = jj_gen;
        }
        jj_consume_token(13);
        return jab.result();
    }

    public JSONObject jobject() throws ParseException, IOException, StringParseException {
        JSONObject jo = new JSONObject();
        JSONString js;
        JSON j;
        jj_consume_token(14);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case JString:
                js = jstring();
                jj_consume_token(15);
                j = json();
                jo.put(js, j);
                label_2:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case 12:
                            break;
                        default:
                            jj_la1[4] = jj_gen;
                            break label_2;
                    }
                    jj_consume_token(12);
                    js = jstring();
                    jj_consume_token(15);
                    j = json();
                    jo.put(js, j);
                }
                break;
            default:
                jj_la1[5] = jj_gen;
        }
        jj_consume_token(16);
        return jo;
    }

    public JSONNull jnull() throws ParseException {
        jj_consume_token(JNull);
        return JSONNull.Null;
    }


    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor.
     */
    public JSONParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new JSONParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor with generated Token Manager.
     */
    public JSONParser(JSONParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(JSONParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }


    /**
     * Get the next Token.
     */
    public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk() {
        /*
      Next token.
     */
        Token jj_nt;
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int jj_kind = -1;

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[17];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 6; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 17; i++) {
            if (la1tokens[i]) {
                int[] jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

}
